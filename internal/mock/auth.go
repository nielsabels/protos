// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/auth.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	capability "protos/internal/capability"
	core "protos/internal/core"
	reflect "reflect"
)

// MockUserManager is a mock of UserManager interface
type MockUserManager struct {
	ctrl     *gomock.Controller
	recorder *MockUserManagerMockRecorder
}

// MockUserManagerMockRecorder is the mock recorder for MockUserManager
type MockUserManagerMockRecorder struct {
	mock *MockUserManager
}

// NewMockUserManager creates a new mock instance
func NewMockUserManager(ctrl *gomock.Controller) *MockUserManager {
	mock := &MockUserManager{ctrl: ctrl}
	mock.recorder = &MockUserManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserManager) EXPECT() *MockUserManagerMockRecorder {
	return m.recorder
}

// CreateUser mocks base method
func (m *MockUserManager) CreateUser(username, password, name string, isadmin bool) (core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", username, password, name, isadmin)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockUserManagerMockRecorder) CreateUser(username, password, name, isadmin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserManager)(nil).CreateUser), username, password, name, isadmin)
}

// ValidateAndGetUser mocks base method
func (m *MockUserManager) ValidateAndGetUser(username, password string) (core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateAndGetUser", username, password)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidateAndGetUser indicates an expected call of ValidateAndGetUser
func (mr *MockUserManagerMockRecorder) ValidateAndGetUser(username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateAndGetUser", reflect.TypeOf((*MockUserManager)(nil).ValidateAndGetUser), username, password)
}

// GetUser mocks base method
func (m *MockUserManager) GetUser(username string) (core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockUserManagerMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserManager)(nil).GetUser), username)
}

// GetUserForToken mocks base method
func (m *MockUserManager) GetUserForToken(token string) (core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserForToken", token)
	ret0, _ := ret[0].(core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserForToken indicates an expected call of GetUserForToken
func (mr *MockUserManagerMockRecorder) GetUserForToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserForToken", reflect.TypeOf((*MockUserManager)(nil).GetUserForToken), token)
}

// MockUser is a mock of User interface
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockUser) Save() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save")
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockUserMockRecorder) Save() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockUser)(nil).Save))
}

// AddToken mocks base method
func (m *MockUser) AddToken(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToken", token)
}

// AddToken indicates an expected call of AddToken
func (mr *MockUserMockRecorder) AddToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockUser)(nil).AddToken), token)
}

// ValidateCapability mocks base method
func (m *MockUser) ValidateCapability(cap *capability.Capability) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCapability", cap)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCapability indicates an expected call of ValidateCapability
func (mr *MockUserMockRecorder) ValidateCapability(cap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCapability", reflect.TypeOf((*MockUser)(nil).ValidateCapability), cap)
}

// IsAdmin mocks base method
func (m *MockUser) IsAdmin() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin
func (mr *MockUserMockRecorder) IsAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockUser)(nil).IsAdmin))
}

// GetInfo mocks base method
func (m *MockUser) GetInfo() core.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(core.UserInfo)
	return ret0
}

// GetInfo indicates an expected call of GetInfo
func (mr *MockUserMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockUser)(nil).GetInfo))
}

// GetUsername mocks base method
func (m *MockUser) GetUsername() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsername")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUsername indicates an expected call of GetUsername
func (mr *MockUserMockRecorder) GetUsername() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsername", reflect.TypeOf((*MockUser)(nil).GetUsername))
}
