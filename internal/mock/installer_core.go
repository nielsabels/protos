// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/installer.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	core "protos/internal/core"
	reflect "reflect"
)

// MockInstaller is a mock of Installer interface
type MockInstaller struct {
	ctrl     *gomock.Controller
	recorder *MockInstallerMockRecorder
}

// MockInstallerMockRecorder is the mock recorder for MockInstaller
type MockInstallerMockRecorder struct {
	mock *MockInstaller
}

// NewMockInstaller creates a new mock instance
func NewMockInstaller(ctrl *gomock.Controller) *MockInstaller {
	mock := &MockInstaller{ctrl: ctrl}
	mock.recorder = &MockInstallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstaller) EXPECT() *MockInstallerMockRecorder {
	return m.recorder
}

// ReadVersion mocks base method
func (m *MockInstaller) ReadVersion(version string) (core.InstallerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadVersion", version)
	ret0, _ := ret[0].(core.InstallerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadVersion indicates an expected call of ReadVersion
func (mr *MockInstallerMockRecorder) ReadVersion(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadVersion", reflect.TypeOf((*MockInstaller)(nil).ReadVersion), version)
}

// IsPlatformImageAvailable mocks base method
func (m *MockInstaller) IsPlatformImageAvailable(version string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsPlatformImageAvailable", version)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsPlatformImageAvailable indicates an expected call of IsPlatformImageAvailable
func (mr *MockInstallerMockRecorder) IsPlatformImageAvailable(version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsPlatformImageAvailable", reflect.TypeOf((*MockInstaller)(nil).IsPlatformImageAvailable), version)
}

// DownloadAsync mocks base method
func (m *MockInstaller) DownloadAsync(tm core.TaskManager, version, appID string) core.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadAsync", tm, version, appID)
	ret0, _ := ret[0].(core.Task)
	return ret0
}

// DownloadAsync indicates an expected call of DownloadAsync
func (mr *MockInstallerMockRecorder) DownloadAsync(tm, version, appID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAsync", reflect.TypeOf((*MockInstaller)(nil).DownloadAsync), tm, version, appID)
}
