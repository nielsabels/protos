// Code generated by MockGen. DO NOT EDIT.
// Source: internal/core/platform.go

// Package mock is a generated GoMock package.
package mock

import (
	types "github.com/docker/docker/api/types"
	gomock "github.com/golang/mock/gomock"
	core "protos/internal/core"
	util "protos/internal/util"
	reflect "reflect"
)

// MockRuntimePlatform is a mock of RuntimePlatform interface
type MockRuntimePlatform struct {
	ctrl     *gomock.Controller
	recorder *MockRuntimePlatformMockRecorder
}

// MockRuntimePlatformMockRecorder is the mock recorder for MockRuntimePlatform
type MockRuntimePlatformMockRecorder struct {
	mock *MockRuntimePlatform
}

// NewMockRuntimePlatform creates a new mock instance
func NewMockRuntimePlatform(ctrl *gomock.Controller) *MockRuntimePlatform {
	mock := &MockRuntimePlatform{ctrl: ctrl}
	mock.recorder = &MockRuntimePlatformMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRuntimePlatform) EXPECT() *MockRuntimePlatformMockRecorder {
	return m.recorder
}

// GetDockerContainer mocks base method
func (m *MockRuntimePlatform) GetDockerContainer(arg0 string) (core.PlatformRuntimeUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerContainer", arg0)
	ret0, _ := ret[0].(core.PlatformRuntimeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerContainer indicates an expected call of GetDockerContainer
func (mr *MockRuntimePlatformMockRecorder) GetDockerContainer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerContainer", reflect.TypeOf((*MockRuntimePlatform)(nil).GetDockerContainer), arg0)
}

// GetAllDockerContainers mocks base method
func (m *MockRuntimePlatform) GetAllDockerContainers() (map[string]core.PlatformRuntimeUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDockerContainers")
	ret0, _ := ret[0].(map[string]core.PlatformRuntimeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDockerContainers indicates an expected call of GetAllDockerContainers
func (mr *MockRuntimePlatformMockRecorder) GetAllDockerContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDockerContainers", reflect.TypeOf((*MockRuntimePlatform)(nil).GetAllDockerContainers))
}

// GetDockerImage mocks base method
func (m *MockRuntimePlatform) GetDockerImage(arg0 string) (types.ImageInspect, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImage", arg0)
	ret0, _ := ret[0].(types.ImageInspect)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImage indicates an expected call of GetDockerImage
func (mr *MockRuntimePlatformMockRecorder) GetDockerImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImage", reflect.TypeOf((*MockRuntimePlatform)(nil).GetDockerImage), arg0)
}

// GetAllDockerImages mocks base method
func (m *MockRuntimePlatform) GetAllDockerImages() (map[string]types.ImageSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDockerImages")
	ret0, _ := ret[0].(map[string]types.ImageSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDockerImages indicates an expected call of GetAllDockerImages
func (mr *MockRuntimePlatformMockRecorder) GetAllDockerImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDockerImages", reflect.TypeOf((*MockRuntimePlatform)(nil).GetAllDockerImages))
}

// GetDockerImageDataPath mocks base method
func (m *MockRuntimePlatform) GetDockerImageDataPath(arg0 types.ImageInspect) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerImageDataPath", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDockerImageDataPath indicates an expected call of GetDockerImageDataPath
func (mr *MockRuntimePlatformMockRecorder) GetDockerImageDataPath(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerImageDataPath", reflect.TypeOf((*MockRuntimePlatform)(nil).GetDockerImageDataPath), arg0)
}

// PullDockerImage mocks base method
func (m *MockRuntimePlatform) PullDockerImage(arg0 core.Task, arg1, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullDockerImage", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullDockerImage indicates an expected call of PullDockerImage
func (mr *MockRuntimePlatformMockRecorder) PullDockerImage(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullDockerImage", reflect.TypeOf((*MockRuntimePlatform)(nil).PullDockerImage), arg0, arg1, arg2, arg3)
}

// RemoveDockerImage mocks base method
func (m *MockRuntimePlatform) RemoveDockerImage(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDockerImage", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDockerImage indicates an expected call of RemoveDockerImage
func (mr *MockRuntimePlatformMockRecorder) RemoveDockerImage(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDockerImage", reflect.TypeOf((*MockRuntimePlatform)(nil).RemoveDockerImage), id)
}

// GetOrCreateVolume mocks base method
func (m *MockRuntimePlatform) GetOrCreateVolume(arg0, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateVolume", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateVolume indicates an expected call of GetOrCreateVolume
func (mr *MockRuntimePlatformMockRecorder) GetOrCreateVolume(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateVolume", reflect.TypeOf((*MockRuntimePlatform)(nil).GetOrCreateVolume), arg0, arg1)
}

// RemoveVolume mocks base method
func (m *MockRuntimePlatform) RemoveVolume(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveVolume", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveVolume indicates an expected call of RemoveVolume
func (mr *MockRuntimePlatformMockRecorder) RemoveVolume(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveVolume", reflect.TypeOf((*MockRuntimePlatform)(nil).RemoveVolume), arg0)
}

// NewContainer mocks base method
func (m *MockRuntimePlatform) NewContainer(arg0, arg1, arg2, arg3, arg4 string, arg5 []util.Port, arg6 map[string]string) (core.PlatformRuntimeUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewContainer", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(core.PlatformRuntimeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewContainer indicates an expected call of NewContainer
func (mr *MockRuntimePlatformMockRecorder) NewContainer(arg0, arg1, arg2, arg3, arg4, arg5, arg6 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewContainer", reflect.TypeOf((*MockRuntimePlatform)(nil).NewContainer), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
}

// MockPlatformRuntimeUnit is a mock of PlatformRuntimeUnit interface
type MockPlatformRuntimeUnit struct {
	ctrl     *gomock.Controller
	recorder *MockPlatformRuntimeUnitMockRecorder
}

// MockPlatformRuntimeUnitMockRecorder is the mock recorder for MockPlatformRuntimeUnit
type MockPlatformRuntimeUnitMockRecorder struct {
	mock *MockPlatformRuntimeUnit
}

// NewMockPlatformRuntimeUnit creates a new mock instance
func NewMockPlatformRuntimeUnit(ctrl *gomock.Controller) *MockPlatformRuntimeUnit {
	mock := &MockPlatformRuntimeUnit{ctrl: ctrl}
	mock.recorder = &MockPlatformRuntimeUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPlatformRuntimeUnit) EXPECT() *MockPlatformRuntimeUnitMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockPlatformRuntimeUnit) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockPlatformRuntimeUnitMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).Start))
}

// Stop mocks base method
func (m *MockPlatformRuntimeUnit) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockPlatformRuntimeUnitMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).Stop))
}

// Update mocks base method
func (m *MockPlatformRuntimeUnit) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPlatformRuntimeUnitMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).Update))
}

// Remove mocks base method
func (m *MockPlatformRuntimeUnit) Remove() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove")
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove
func (mr *MockPlatformRuntimeUnitMockRecorder) Remove() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).Remove))
}

// GetID mocks base method
func (m *MockPlatformRuntimeUnit) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockPlatformRuntimeUnitMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).GetID))
}

// GetIP mocks base method
func (m *MockPlatformRuntimeUnit) GetIP() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIP")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetIP indicates an expected call of GetIP
func (mr *MockPlatformRuntimeUnitMockRecorder) GetIP() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIP", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).GetIP))
}

// GetStatus mocks base method
func (m *MockPlatformRuntimeUnit) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockPlatformRuntimeUnitMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).GetStatus))
}

// GetExitCode mocks base method
func (m *MockPlatformRuntimeUnit) GetExitCode() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitCode")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetExitCode indicates an expected call of GetExitCode
func (mr *MockPlatformRuntimeUnitMockRecorder) GetExitCode() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitCode", reflect.TypeOf((*MockPlatformRuntimeUnit)(nil).GetExitCode))
}
