// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/manager.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockdnsResource is a mock of dnsResource interface
type MockdnsResource struct {
	ctrl     *gomock.Controller
	recorder *MockdnsResourceMockRecorder
}

// MockdnsResourceMockRecorder is the mock recorder for MockdnsResource
type MockdnsResourceMockRecorder struct {
	mock *MockdnsResource
}

// NewMockdnsResource creates a new mock instance
func NewMockdnsResource(ctrl *gomock.Controller) *MockdnsResource {
	mock := &MockdnsResource{ctrl: ctrl}
	mock.recorder = &MockdnsResourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockdnsResource) EXPECT() *MockdnsResourceMockRecorder {
	return m.recorder
}

// GetName mocks base method
func (m *MockdnsResource) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockdnsResourceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockdnsResource)(nil).GetName))
}

// GetValue mocks base method
func (m *MockdnsResource) GetValue() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValue")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetValue indicates an expected call of GetValue
func (mr *MockdnsResourceMockRecorder) GetValue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValue", reflect.TypeOf((*MockdnsResource)(nil).GetValue))
}
