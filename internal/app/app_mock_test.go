// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/app.go

// Package app is a generated GoMock package.
package app

import (
	core "protos/internal/core"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockparent is a mock of parent interface
type Mockparent struct {
	ctrl     *gomock.Controller
	recorder *MockparentMockRecorder
}

// MockparentMockRecorder is the mock recorder for Mockparent
type MockparentMockRecorder struct {
	mock *Mockparent
}

// NewMockparent creates a new mock instance
func NewMockparent(ctrl *gomock.Controller) *Mockparent {
	mock := &Mockparent{ctrl: ctrl}
	mock.recorder = &MockparentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockparent) EXPECT() *MockparentMockRecorder {
	return m.recorder
}

// saveApp mocks base method
func (m *Mockparent) saveApp(app *App) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "saveApp", app)
}

// saveApp indicates an expected call of saveApp
func (mr *MockparentMockRecorder) saveApp(app interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "saveApp", reflect.TypeOf((*Mockparent)(nil).saveApp), app)
}

// getPlatform mocks base method
func (m *Mockparent) getPlatform() core.RuntimePlatform {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getPlatform")
	ret0, _ := ret[0].(core.RuntimePlatform)
	return ret0
}

// getPlatform indicates an expected call of getPlatform
func (mr *MockparentMockRecorder) getPlatform() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getPlatform", reflect.TypeOf((*Mockparent)(nil).getPlatform))
}

// getTaskManager mocks base method
func (m *Mockparent) getTaskManager() core.TaskManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getTaskManager")
	ret0, _ := ret[0].(core.TaskManager)
	return ret0
}

// getTaskManager indicates an expected call of getTaskManager
func (mr *MockparentMockRecorder) getTaskManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getTaskManager", reflect.TypeOf((*Mockparent)(nil).getTaskManager))
}

// getResourceManager mocks base method
func (m *Mockparent) getResourceManager() core.ResourceManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getResourceManager")
	ret0, _ := ret[0].(core.ResourceManager)
	return ret0
}

// getResourceManager indicates an expected call of getResourceManager
func (mr *MockparentMockRecorder) getResourceManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getResourceManager", reflect.TypeOf((*Mockparent)(nil).getResourceManager))
}
