// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/task.go

// Package app is a generated GoMock package.
package app

import (
	gomock "github.com/golang/mock/gomock"
	core "protos/internal/core"
	reflect "reflect"
)

// Mockapp is a mock of app interface
type Mockapp struct {
	ctrl     *gomock.Controller
	recorder *MockappMockRecorder
}

// MockappMockRecorder is the mock recorder for Mockapp
type MockappMockRecorder struct {
	mock *Mockapp
}

// NewMockapp creates a new mock instance
func NewMockapp(ctrl *gomock.Controller) *Mockapp {
	mock := &Mockapp{ctrl: ctrl}
	mock.recorder = &MockappMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockapp) EXPECT() *MockappMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *Mockapp) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start
func (mr *MockappMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*Mockapp)(nil).Start))
}

// Stop mocks base method
func (m *Mockapp) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop
func (mr *MockappMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*Mockapp)(nil).Stop))
}

// AddTask mocks base method
func (m *Mockapp) AddTask(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddTask", arg0)
}

// AddTask indicates an expected call of AddTask
func (mr *MockappMockRecorder) AddTask(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*Mockapp)(nil).AddTask), arg0)
}

// GetID mocks base method
func (m *Mockapp) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID
func (mr *MockappMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*Mockapp)(nil).GetID))
}

// SetStatus mocks base method
func (m *Mockapp) SetStatus(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetStatus", arg0)
}

// SetStatus indicates an expected call of SetStatus
func (mr *MockappMockRecorder) SetStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*Mockapp)(nil).SetStatus), arg0)
}

// StartAsync mocks base method
func (m *Mockapp) StartAsync() core.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartAsync")
	ret0, _ := ret[0].(core.Task)
	return ret0
}

// StartAsync indicates an expected call of StartAsync
func (mr *MockappMockRecorder) StartAsync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartAsync", reflect.TypeOf((*Mockapp)(nil).StartAsync))
}

// createContainer mocks base method
func (m *Mockapp) createContainer() (core.PlatformRuntimeUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "createContainer")
	ret0, _ := ret[0].(core.PlatformRuntimeUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// createContainer indicates an expected call of createContainer
func (mr *MockappMockRecorder) createContainer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "createContainer", reflect.TypeOf((*Mockapp)(nil).createContainer))
}

// Mockstore is a mock of store interface
type Mockstore struct {
	ctrl     *gomock.Controller
	recorder *MockstoreMockRecorder
}

// MockstoreMockRecorder is the mock recorder for Mockstore
type MockstoreMockRecorder struct {
	mock *Mockstore
}

// NewMockstore creates a new mock instance
func NewMockstore(ctrl *gomock.Controller) *Mockstore {
	mock := &Mockstore{ctrl: ctrl}
	mock.recorder = &MockstoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *Mockstore) EXPECT() *MockstoreMockRecorder {
	return m.recorder
}

// GetInstaller mocks base method
func (m *Mockstore) GetInstaller(arg0 string) (core.Installer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstaller", arg0)
	ret0, _ := ret[0].(core.Installer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstaller indicates an expected call of GetInstaller
func (mr *MockstoreMockRecorder) GetInstaller(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstaller", reflect.TypeOf((*Mockstore)(nil).GetInstaller), arg0)
}
